//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""2b0c3fbc-cda2-4834-97f1-d71db150bafe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""494afc82-5e60-4d70-8003-2359c26bf235"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3396601b-7d09-41c5-96c2-3b2a7a88addb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8a423b57-decc-40ac-afc7-1c1bee547604"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use Spell"",
                    ""type"": ""Button"",
                    ""id"": ""9ea46b03-97d6-4beb-a7e9-c8e90613d9ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""4c477464-951b-40b5-b6ca-1e70e7e5514a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""14797dba-6527-4bd6-8478-03c1a84badda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Game"",
                    ""type"": ""Button"",
                    ""id"": ""3fb6d9ed-c34a-4ef9-8147-91e2bc2a0684"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch To Spell Type With Index 0"",
                    ""type"": ""Button"",
                    ""id"": ""669a2cf2-fdf6-4b4a-8c4d-9ad49ba6ce9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch To Spell Type With Index 1"",
                    ""type"": ""Button"",
                    ""id"": ""98f95d89-5479-44eb-8cae-bfc18ee06d42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch To Spell Type With Index 2"",
                    ""type"": ""Button"",
                    ""id"": ""a855ebcb-8983-41da-bbfb-77870b51cc51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch To Spell Type With Index 3"",
                    ""type"": ""Button"",
                    ""id"": ""ea194457-7249-4527-96a0-72b296495bd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Spell Type"",
                    ""type"": ""Value"",
                    ""id"": ""385ea3c5-b8db-4b8e-b823-8d081f036109"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use Hook"",
                    ""type"": ""Button"",
                    ""id"": ""406cbae1-4c18-4af8-89ff-098dbb23702e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""41b27a80-589a-4f45-a6e9-16fc9ffec7b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""393695d1-766a-4125-9bcd-2568a56d97b7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""44441a67-83e1-44c0-98be-077afc74c783"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2a238b51-1c21-4aea-9f27-d0615cffe39e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a9ebca17-1b80-4333-94c5-1dd5e49998a4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1ff406a-7ba1-4443-a694-918a72858368"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e6763c0a-6a7a-4993-8661-b8333a0f5573"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63296115-38e6-4465-af20-203432d41e97"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2e77e45-485c-41d6-a4d0-de427a1ee333"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Use Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ab12695-dc5e-4215-8504-5bad27b4cd86"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c84f732-cfaa-4145-a13f-d2222177bc32"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09543f98-ccc3-4fc1-beca-29c449d3a981"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8ae00d8-9f36-48c2-ad89-43ad436ae892"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Switch To Spell Type With Index 0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfe11d48-8822-4bcb-84e7-d1cd2640c9a9"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Switch To Spell Type With Index 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""458031a0-a1e8-4394-9693-32a558788029"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Switch To Spell Type With Index 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e10521bb-3995-4faf-af73-3d18202f30da"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Switch To Spell Type With Index 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""798e5259-4756-40ba-9032-1b3674d2bac5"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Switch Spell Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaf3a4d7-ecee-42cd-857d-29b070ca91aa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Use Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a5bfbd6-7435-4577-bcfe-1c7963a0de35"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""351c0220-d939-40f0-b092-2e6a19aee6eb"",
            ""actions"": [
                {
                    ""name"": ""Close Window"",
                    ""type"": ""Button"",
                    ""id"": ""37c75fa3-71a2-4ae8-b15e-3bd0ce7944e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30099ab4-8994-42c7-9d92-ab3777b355ab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Close Window"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Comics"",
            ""id"": ""0ce37481-080d-44b9-a87c-78f03af590ac"",
            ""actions"": [
                {
                    ""name"": ""Close Window"",
                    ""type"": ""Button"",
                    ""id"": ""712b091d-3b0a-45e5-aa45-22a1ae1a6ff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip Panel Animation"",
                    ""type"": ""Button"",
                    ""id"": ""9c481698-f488-44fd-8e56-cabc63370a4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab2d142f-bf9f-46d2-8f1e-f7b4f0167f19"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Close Window"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e2c45b8-ea97-4119-9d85-2b5a946832fd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Skip Panel Animation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        m_Character_Look = m_Character.FindAction("Look", throwIfNotFound: true);
        m_Character_UseSpell = m_Character.FindAction("Use Spell", throwIfNotFound: true);
        m_Character_Walk = m_Character.FindAction("Walk", throwIfNotFound: true);
        m_Character_Dash = m_Character.FindAction("Dash", throwIfNotFound: true);
        m_Character_PauseGame = m_Character.FindAction("Pause Game", throwIfNotFound: true);
        m_Character_SwitchToSpellTypeWithIndex0 = m_Character.FindAction("Switch To Spell Type With Index 0", throwIfNotFound: true);
        m_Character_SwitchToSpellTypeWithIndex1 = m_Character.FindAction("Switch To Spell Type With Index 1", throwIfNotFound: true);
        m_Character_SwitchToSpellTypeWithIndex2 = m_Character.FindAction("Switch To Spell Type With Index 2", throwIfNotFound: true);
        m_Character_SwitchToSpellTypeWithIndex3 = m_Character.FindAction("Switch To Spell Type With Index 3", throwIfNotFound: true);
        m_Character_SwitchSpellType = m_Character.FindAction("Switch Spell Type", throwIfNotFound: true);
        m_Character_UseHook = m_Character.FindAction("Use Hook", throwIfNotFound: true);
        m_Character_Interact = m_Character.FindAction("Interact", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CloseWindow = m_UI.FindAction("Close Window", throwIfNotFound: true);
        // Comics
        m_Comics = asset.FindActionMap("Comics", throwIfNotFound: true);
        m_Comics_CloseWindow = m_Comics.FindAction("Close Window", throwIfNotFound: true);
        m_Comics_SkipPanelAnimation = m_Comics.FindAction("Skip Panel Animation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Move;
    private readonly InputAction m_Character_Jump;
    private readonly InputAction m_Character_Look;
    private readonly InputAction m_Character_UseSpell;
    private readonly InputAction m_Character_Walk;
    private readonly InputAction m_Character_Dash;
    private readonly InputAction m_Character_PauseGame;
    private readonly InputAction m_Character_SwitchToSpellTypeWithIndex0;
    private readonly InputAction m_Character_SwitchToSpellTypeWithIndex1;
    private readonly InputAction m_Character_SwitchToSpellTypeWithIndex2;
    private readonly InputAction m_Character_SwitchToSpellTypeWithIndex3;
    private readonly InputAction m_Character_SwitchSpellType;
    private readonly InputAction m_Character_UseHook;
    private readonly InputAction m_Character_Interact;
    public struct CharacterActions
    {
        private @MainControls m_Wrapper;
        public CharacterActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Character_Move;
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        public InputAction @Look => m_Wrapper.m_Character_Look;
        public InputAction @UseSpell => m_Wrapper.m_Character_UseSpell;
        public InputAction @Walk => m_Wrapper.m_Character_Walk;
        public InputAction @Dash => m_Wrapper.m_Character_Dash;
        public InputAction @PauseGame => m_Wrapper.m_Character_PauseGame;
        public InputAction @SwitchToSpellTypeWithIndex0 => m_Wrapper.m_Character_SwitchToSpellTypeWithIndex0;
        public InputAction @SwitchToSpellTypeWithIndex1 => m_Wrapper.m_Character_SwitchToSpellTypeWithIndex1;
        public InputAction @SwitchToSpellTypeWithIndex2 => m_Wrapper.m_Character_SwitchToSpellTypeWithIndex2;
        public InputAction @SwitchToSpellTypeWithIndex3 => m_Wrapper.m_Character_SwitchToSpellTypeWithIndex3;
        public InputAction @SwitchSpellType => m_Wrapper.m_Character_SwitchSpellType;
        public InputAction @UseHook => m_Wrapper.m_Character_UseHook;
        public InputAction @Interact => m_Wrapper.m_Character_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @UseSpell.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseSpell;
                @UseSpell.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseSpell;
                @UseSpell.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseSpell;
                @Walk.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnWalk;
                @Dash.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                @PauseGame.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPauseGame;
                @SwitchToSpellTypeWithIndex0.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex0.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex0.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex1.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex1.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex1.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex2.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex2.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex2.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex3.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex3;
                @SwitchToSpellTypeWithIndex3.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex3;
                @SwitchToSpellTypeWithIndex3.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchToSpellTypeWithIndex3;
                @SwitchSpellType.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchSpellType;
                @SwitchSpellType.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchSpellType;
                @SwitchSpellType.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwitchSpellType;
                @UseHook.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseHook;
                @UseHook.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseHook;
                @UseHook.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnUseHook;
                @Interact.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @UseSpell.started += instance.OnUseSpell;
                @UseSpell.performed += instance.OnUseSpell;
                @UseSpell.canceled += instance.OnUseSpell;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
                @SwitchToSpellTypeWithIndex0.started += instance.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex0.performed += instance.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex0.canceled += instance.OnSwitchToSpellTypeWithIndex0;
                @SwitchToSpellTypeWithIndex1.started += instance.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex1.performed += instance.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex1.canceled += instance.OnSwitchToSpellTypeWithIndex1;
                @SwitchToSpellTypeWithIndex2.started += instance.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex2.performed += instance.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex2.canceled += instance.OnSwitchToSpellTypeWithIndex2;
                @SwitchToSpellTypeWithIndex3.started += instance.OnSwitchToSpellTypeWithIndex3;
                @SwitchToSpellTypeWithIndex3.performed += instance.OnSwitchToSpellTypeWithIndex3;
                @SwitchToSpellTypeWithIndex3.canceled += instance.OnSwitchToSpellTypeWithIndex3;
                @SwitchSpellType.started += instance.OnSwitchSpellType;
                @SwitchSpellType.performed += instance.OnSwitchSpellType;
                @SwitchSpellType.canceled += instance.OnSwitchSpellType;
                @UseHook.started += instance.OnUseHook;
                @UseHook.performed += instance.OnUseHook;
                @UseHook.canceled += instance.OnUseHook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_CloseWindow;
    public struct UIActions
    {
        private @MainControls m_Wrapper;
        public UIActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseWindow => m_Wrapper.m_UI_CloseWindow;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @CloseWindow.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseWindow;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseWindow.started += instance.OnCloseWindow;
                @CloseWindow.performed += instance.OnCloseWindow;
                @CloseWindow.canceled += instance.OnCloseWindow;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Comics
    private readonly InputActionMap m_Comics;
    private IComicsActions m_ComicsActionsCallbackInterface;
    private readonly InputAction m_Comics_CloseWindow;
    private readonly InputAction m_Comics_SkipPanelAnimation;
    public struct ComicsActions
    {
        private @MainControls m_Wrapper;
        public ComicsActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseWindow => m_Wrapper.m_Comics_CloseWindow;
        public InputAction @SkipPanelAnimation => m_Wrapper.m_Comics_SkipPanelAnimation;
        public InputActionMap Get() { return m_Wrapper.m_Comics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ComicsActions set) { return set.Get(); }
        public void SetCallbacks(IComicsActions instance)
        {
            if (m_Wrapper.m_ComicsActionsCallbackInterface != null)
            {
                @CloseWindow.started -= m_Wrapper.m_ComicsActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.performed -= m_Wrapper.m_ComicsActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.canceled -= m_Wrapper.m_ComicsActionsCallbackInterface.OnCloseWindow;
                @SkipPanelAnimation.started -= m_Wrapper.m_ComicsActionsCallbackInterface.OnSkipPanelAnimation;
                @SkipPanelAnimation.performed -= m_Wrapper.m_ComicsActionsCallbackInterface.OnSkipPanelAnimation;
                @SkipPanelAnimation.canceled -= m_Wrapper.m_ComicsActionsCallbackInterface.OnSkipPanelAnimation;
            }
            m_Wrapper.m_ComicsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseWindow.started += instance.OnCloseWindow;
                @CloseWindow.performed += instance.OnCloseWindow;
                @CloseWindow.canceled += instance.OnCloseWindow;
                @SkipPanelAnimation.started += instance.OnSkipPanelAnimation;
                @SkipPanelAnimation.performed += instance.OnSkipPanelAnimation;
                @SkipPanelAnimation.canceled += instance.OnSkipPanelAnimation;
            }
        }
    }
    public ComicsActions @Comics => new ComicsActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnUseSpell(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
        void OnSwitchToSpellTypeWithIndex0(InputAction.CallbackContext context);
        void OnSwitchToSpellTypeWithIndex1(InputAction.CallbackContext context);
        void OnSwitchToSpellTypeWithIndex2(InputAction.CallbackContext context);
        void OnSwitchToSpellTypeWithIndex3(InputAction.CallbackContext context);
        void OnSwitchSpellType(InputAction.CallbackContext context);
        void OnUseHook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnCloseWindow(InputAction.CallbackContext context);
    }
    public interface IComicsActions
    {
        void OnCloseWindow(InputAction.CallbackContext context);
        void OnSkipPanelAnimation(InputAction.CallbackContext context);
    }
}
